# Run all tests, linters, code analysis and other QA tasks on
# every push to main and PRs.
# Deploy PRs as preview apps, deploy main to prod.

# 1. Create a new SSH key
# 2. Add the public key to https://dashboard.lamdera.app/account/sshkeys
# 3. Add the private key as SSH_KEY in the repository secrets
# 4. Add the contents of ~/.elm/.lamdera-cli as LAMDERA_TOKEN in the repository secrets

name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

jobs:
  CI:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          fetch-depth: 0

      - uses: actions/checkout@v4
        if: github.event_name != 'pull_request'
        with:
          fetch-depth: 0

      - uses: cachix/install-nix-action@v26
      - uses: cachix/cachix-action@v14
        with:
          name: niteo-public
          authToken: "${{ secrets.CACHIX_AUTH_TOKEN_PUBLIC }}"

      - name: Install devenv
        run: nix profile install nixpkgs#devenv

      - name: Run tests and linters
        run: devenv test

      # - uses: actions/setup-node@v4
      #   with:
      #     node-version: 18

      # - name: Install Lamdera
      #   env:
      #     LAMDERA_TOKEN: ${{ secrets.LAMDERA_TOKEN }}
      #   # yamllint disable rule:line-length
      #   run: |
      #     curl https://static.lamdera.com/bin/lamdera-1.2.1-linux-x86_64 -o /usr/local/bin/lamdera
      #     chmod a+x /usr/local/bin/lamdera
      #     mkdir ~/.ssh && ssh-keyscan apps.lamdera.com >> ~/.ssh/known_hosts
      #     git remote add lamdera git@apps.lamdera.com:spellings.git
      #     mkdir -p ~/.elm && echo -n "$LAMDERA_TOKEN">> ~/.elm/.lamdera-cli
      #   # yamllint enable rule:line-length

      # - name: Build CSS
      #   run: |
      #     npm install
      #     npm run build:css

      # - name: Run linters and formatters
      #   run: |
      #     pip install pre-commit pre-commit-hooks
      #     npm install -g elm-format
      #     npm install -g elm-review
      #     pre-commit run --all-files
      #     elm-review --compiler "$(which lamdera)"

      # - name: Run tests
      #   run: |
      #     lamdera make || true
      #     npx elm-test-rs --compiler "$(which lamdera)"

      # - name: Check for uncommitted-changes
      #   uses: teamniteo/gha-actions/uncommitted-changes@main

      # - name: Install SSH key for deployment
      #   uses: shimataro/ssh-key-action@v2
      #   with:
      #     key: ${{ secrets.SSH_KEY }}
      #     known_hosts: "already added in Install Lamdera step"

      # - name: Deploy
      #   run: |
      #     yes | lamdera deploy

      # # On `main`, `lamdera deploy` will run `lamdera check` automatically.
      # # However, not on branches, so we need to run it manually. But `lamdera check`
      # # expects to be run from `main` or `master` branch, so we need to trick it.
      # # Since this repo uses `main`, we can checkout from current branch into
      # # `master` and master will get all changes from the current branch.
      # - name: Lamdera check
      #   if: github.event_name == 'pull_request'
      #   run: |
      #     git checkout -b master
      #     lamdera check
